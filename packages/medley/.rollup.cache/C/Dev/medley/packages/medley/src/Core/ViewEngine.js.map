{"version":3,"file":"ViewEngine.js","sourceRoot":"","sources":["ViewEngine.ts"],"names":[],"mappings":";AAIA,MAAM,OAAO,UAAU;IAWrB,YACU,QAA6C,EAC7C,eAA0D;QAD1D,aAAQ,GAAR,QAAQ,CAAqC;QAC7C,oBAAe,GAAf,eAAe,CAA2C;QAZ5D,YAAO,GAAO,EAAE,CAAC;QAcvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAdD,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,UAAU,CAAC,OAAW;QACpB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAUY,WAAW,CAAI,OAAe,EAAE,GAAG,IAAW;;YACzD,IAAI,CAAC,OAAO;gBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAE1D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC3C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAE9D,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC;YAE9B,IAAI,UAAU,GAAG;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,CAAC;YAEF,IAAI,IAAI,mCACH,IAAI,CAAC,OAAO,KACf,KAAK;gBACL,UAAU,GACX,CAAC;YAEF,IAAI;gBACF,OAAO,MAAM,YAAY,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;aAC1C;oBAAS;gBACR,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;aAC3B;QACH,CAAC;KAAA;CACF","sourcesContent":["import { Typed } from \"./Typed\";\n\nexport type ViewFunction = (cntx: any, ...args: any[]) => Promise<any>;\n\nexport class ViewEngine {\n  private context: {} = {};\n\n  getContext(): {} {\n    return this.context;\n  }\n\n  setContext(context: {}): void {\n    this.context = context;\n  }\n\n  constructor(\n    private getModel: (modelId: string) => Promise<Typed>,\n    private getViewFunction: (typeId: string) => Promise<ViewFunction>,\n  ) {\n    this.setContext = this.setContext.bind(this);\n    this.renderModel = this.renderModel.bind(this);\n  }\n\n  public async renderModel<T>(modelId: string, ...args: any[]): Promise<T> {\n    if (!modelId) throw new Error(\"modelId is null or empty\");\n\n    const model = await this.getModel(modelId);\n    const viewFunction = await this.getViewFunction(model.typeId);\n\n    let oldContext = this.context;\n\n    let viewEngine = {\n      renderModel: this.renderModel,\n      setContext: this.setContext,\n    };\n\n    let cntx = {\n      ...this.context,\n      model,\n      viewEngine,\n    };\n\n    try {\n      return await viewFunction(cntx, ...args);\n    } finally {\n      this.context = oldContext;\n    }\n  }\n}\n"]}
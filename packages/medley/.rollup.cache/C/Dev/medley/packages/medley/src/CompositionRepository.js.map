{"version":3,"file":"CompositionRepository.js","sourceRoot":"","sources":["CompositionRepository.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAY,MAAM,SAAS,CAAC;AAQnD,MAAM,OAAO,qBAAqB;IAKhC,YAAY,OAAsC;QAJ1C,WAAM,GAAkC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAKnE,IAAI,CAAC,eAAe,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,KAAI,IAAI,eAAe,EAAE,CAAC;QACzE,IAAI,CAAC,cAAc,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,KAAI,IAAI,cAAc,EAAE,CAAC;QACtE,IAAI,CAAC,MAAM,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,IAAI,CAAC,MAAM,CAAC;IAC/C,CAAC;IAEY,IAAI,CAAC,WAAwB,EAAE,GAAS;;YACnD,IAAK,WAAW,CAAC,KAAkB,CAAC,IAAI,KAAK,SAAS,EAAE;gBACtD,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CACnC,IAAI,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAC3C,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,KAAiB,CAAC,CAAC;aAC/D;YACD,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAC5D,CAAC;KAAA;IAEY,WAAW,CAAC,GAAQ;;YAC/B,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAgB,MAAM,CAAC,OAAO,CAAC;YAChD,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACpC,CAAC;KAAA;IAED,IAAW,WAAW;QACpB,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;QACrE,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YAC1B,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gBAChC,uCAAY,CAAC,KAAE,MAAM,EAAE,SAAS,IAAG;YACrC,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,CAAC;QACb,CAAC,CAAC,CAAC;QACH,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ;gBACjC,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAClD,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,IAAI,EAAc;YAClD,YAAY,EAAE,GAAG;SAClB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Composition } from \"./Composition\";\nimport { ModelRepository } from \"./Models\";\nimport { TypeRepository, TypeTree } from \"./Types\";\n\nexport interface CompositionRepositoryOptions {\n  modelRepository?: ModelRepository;\n  typeRepository?: TypeRepository;\n  import?: (url: string) => Promise<any>;\n}\n\nexport class CompositionRepository {\n  private import: (url: string) => Promise<any> = (url) => import(url);\n  public modelRepository: ModelRepository;\n  public typeRepository: TypeRepository;\n\n  constructor(options?: CompositionRepositoryOptions) {\n    this.modelRepository = options?.modelRepository || new ModelRepository();\n    this.typeRepository = options?.typeRepository || new TypeRepository();\n    this.import = options?.import || this.import;\n  }\n\n  public async load(composition: Composition, url?: URL) {\n    if ((composition.types as TypeTree).name === undefined) {\n      await this.typeRepository.loadFromUrl(\n        new URL(composition.types.toString(), url),\n      );\n    } else {\n      await this.typeRepository.load(composition.types as TypeTree);\n    }\n    await this.modelRepository.load(composition.modelsByType);\n  }\n\n  public async loadFromUrl(url: URL) {\n    var module = await this.import(url.toString());\n    const composition: Composition = module.default;\n    await this.load(composition, url);\n  }\n\n  public get composition(): Composition {\n    const mot = Array.from(this.modelRepository.modelsByTypeId.values());\n    const mbt = mot.map((val) => {\n      val.models = val.models.map((m) => {\n        return { ...m, typeId: undefined };\n      });\n      return val;\n    });\n    return {\n      types: this.typeRepository.typesUrl\n        ? new URL(this.typeRepository.typesUrl.toString())\n        : this.typeRepository.typeTree || {} as TypeTree,\n      modelsByType: mbt,\n    };\n  }\n}\n"]}
{"version":3,"file":"TypeRepository.js","sourceRoot":"","sources":["TypeRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { ViewFunction } from \"../Core/index\";\nimport { Type, TypeTree, TypeVersion } from \"./Type\";\n\nexport interface TypeRepositoryOptions {\n  onResolvedTypeTreeUpdate?: (typeTree: TypeTree) => void;\n  onTypeTreeUpdate?: (typeTree: TypeTree) => void;\n  onTypesUrlUpdate?: (typesUrl: URL) => void;\n  import?: (url: string) => Promise<any>;\n}\n\nexport class TypeRepository {\n  private typeVersionMap: Map<string, { type: Type; version: TypeVersion }> =\n    new Map();\n  private onResolvedTypeTreeUpdate: (typeTree: TypeTree) => void = () => {};\n  private onTypeTreeUpdate: (typeTree: TypeTree) => void = () => {};\n  private onTypesUrlUpdate: (typesUrl: URL) => void = () => {};\n  private import: (url: string) => Promise<any> = (url) => import(url);\n\n  public typesUrl: URL | undefined;\n  public resolvedTypeTree: TypeTree | undefined;\n  public typeTree: TypeTree | undefined;\n\n  constructor(options?: TypeRepositoryOptions) {\n    this.updateOptions(options);\n    this.getViewFunction = this.getViewFunction.bind(this);\n  }\n\n  public updateOptions(options?: TypeRepositoryOptions) {\n    this.onResolvedTypeTreeUpdate = options?.onResolvedTypeTreeUpdate ||\n      this.onResolvedTypeTreeUpdate;\n    this.onTypeTreeUpdate = options?.onTypeTreeUpdate || this.onTypeTreeUpdate;\n    this.onTypesUrlUpdate = options?.onTypesUrlUpdate || this.onTypesUrlUpdate;\n    this.import = options?.import || this.import;\n  }\n\n  public async loadFromUrl(url: URL): Promise<void> {\n    this.typesUrl = url;\n    this.onTypesUrlUpdate(this.typesUrl);\n    var module = await this.import(url.toString());\n    const typeTree: TypeTree = module.default;\n    return this.load(typeTree);\n  }\n\n  public async load(typeTree: TypeTree): Promise<void> {\n    this.typeTree = typeTree;\n    this.onTypeTreeUpdate(this.typeTree);\n    this.resolvedTypeTree = {\n      name: typeTree.name,\n      iconUrl: typeTree.iconUrl,\n      types: [],\n      groups: [],\n    };\n    this.typeVersionMap = new Map();\n    await this.resolveTypeTree(typeTree, this.resolvedTypeTree);\n    this.onResolvedTypeTreeUpdate(this.resolvedTypeTree);\n  }\n\n  public versionToType(versionId: string): Type | undefined {\n    const { type } = this.typeVersionMap.get(versionId) || {};\n    return type;\n  }\n\n  public async getViewFunction(typeVersionId: string): Promise<ViewFunction> {\n    const { type, version } = this.typeVersionMap.get(typeVersionId) || {};\n    if (type === undefined || version === undefined) {\n      throw new Error(`type with version id: ${typeVersionId} not found`);\n    }\n\n    const typeModuleUrl = new URL(\n      version.viewFunction.url.toString(),\n      this.typesUrl,\n    );\n    if (typeModuleUrl === undefined) {\n      throw new Error(\"typeModuleUrl is undefined\");\n    }\n\n    const typeModule = await this.import(typeModuleUrl.toString());\n    if (version.viewFunction.name) {\n      return typeModule[version.viewFunction.name];\n    } else {\n      return typeModule.default;\n    }\n  }\n\n  private async resolveTypeTree(\n    partialTypeTree: TypeTree,\n    resolvedTypeTree: TypeTree,\n  ): Promise<void> {\n    for await (const type of partialTypeTree.types) {\n      if ((type as Type).name === undefined) {\n        const typeUrl = new URL(type.toString(), this.typesUrl);\n        const typeLoaded = await this.loadType(typeUrl);\n        resolvedTypeTree.types.push(typeLoaded);\n        this.indexType(typeLoaded);\n      } else {\n        this.indexType(type as Type);\n        resolvedTypeTree.types.push(type);\n      }\n    }\n    if (partialTypeTree.groups !== undefined) {\n      for await (const group of partialTypeTree.groups) {\n        let groupTypeTree: TypeTree;\n        if ((group as TypeTree).name === undefined) {\n          const groupUrl = new URL(group.toString(), this.typesUrl);\n          groupTypeTree = await this.loadGroup(groupUrl);\n        } else {\n          groupTypeTree = group as TypeTree;\n        }\n        const resolvedGroup: TypeTree = {\n          name: groupTypeTree.name,\n          iconUrl: groupTypeTree.iconUrl,\n          types: [],\n          groups: [],\n        };\n        resolvedTypeTree.groups?.push(resolvedGroup);\n        await this.resolveTypeTree(groupTypeTree, resolvedGroup);\n      }\n    }\n  }\n\n  private indexType(type: Type) {\n    type.versions.forEach((version) => {\n      this.typeVersionMap.set(version.id, { type, version });\n    });\n  }\n\n  public async loadGroup(url: URL): Promise<TypeTree> {\n    var module = await this.import(url.toString());\n    const typeTree: TypeTree = module.default;\n    return typeTree;\n  }\n\n  private async loadType(url: URL): Promise<Type> {\n    const typeModule = await this.import(url.toString());\n    const type: Type = typeModule.default;\n    return type;\n  }\n}\n"]}
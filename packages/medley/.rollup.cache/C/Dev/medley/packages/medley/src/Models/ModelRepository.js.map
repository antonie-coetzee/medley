{"version":3,"file":"ModelRepository.js","sourceRoot":"","sources":["ModelRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuidv4} from \"uuid\";\nimport { ModelsOfType, TypedModel } from \"./Model\";\n\nexport interface ModelRepositoryOptions {\n  typedModelLoadHook?: (typedModel: TypedModel) => TypedModel;\n  modelsOfTypeLoadHook?: (modelsofType: ModelsOfType) => ModelsOfType;\n}\n\nexport class ModelRepository {\n  public modelsById: Map<string, TypedModel> = new Map();\n  private typedModelLoadHook: (typedModel: TypedModel) => TypedModel = (tm) =>\n    tm;\n  public modelsByTypeId: Map<string, ModelsOfType> = new Map();\n  private modelsOfTypeLoadHook: (modelsofType: ModelsOfType) => ModelsOfType = (\n    mot,\n  ) => mot;\n\n  constructor(options?: ModelRepositoryOptions) {\n    this.getModelById = this.getModelById.bind(this);\n    this.updateOptions(options);\n  }\n\n  public updateOptions(options?: ModelRepositoryOptions) {\n    this.typedModelLoadHook = options?.typedModelLoadHook ||\n      this.typedModelLoadHook;\n    this.modelsOfTypeLoadHook = options?.modelsOfTypeLoadHook ||\n      this.modelsOfTypeLoadHook;\n  }\n\n  public async load(modelsByType: ModelsOfType[]): Promise<void> {\n    this.modelsById.clear();\n    this.modelsByTypeId.clear();\n    modelsByType.forEach((modelsWithTypeId) => {\n      const modelsOfType = this.modelsOfTypeLoadHook(modelsWithTypeId);\n      this.modelsByTypeId.set(modelsWithTypeId.typeId, modelsOfType);\n      const typeId = modelsWithTypeId.typeId;\n      modelsWithTypeId.models.forEach((model) => {\n        const typedModel = this.typedModelLoadHook(model as TypedModel);\n        typedModel.typeId = typeId;\n        this.modelsById.set(model.id, typedModel);\n      });\n    });\n  }\n\n  public async getModelById(id: string): Promise<TypedModel> {\n    const model = this.modelsById.get(id);\n    if (model === undefined) throw new Error(`model with id: ${id}, not found`);\n    return Promise.resolve(model);\n  }\n\n  public getModelsByTypeId(typeId: string): ModelsOfType | undefined {\n    return this.modelsByTypeId.get(typeId);\n  }\n\n  public async upsertModel(model: Partial<TypedModel>): Promise<void> {\n    const currentModel = this.modelsById.get(model.id || \"\");\n\n    if (currentModel?.typeId === undefined && model.typeId === undefined) {\n      throw new Error(\"typeId missing\");\n    }\n    const typeId = currentModel?.typeId || model.typeId || \"\";\n    const uModel: TypedModel = {\n      ...model,\n      typeId,\n      id: currentModel?.id || uuidv4(),\n      name: model.name || currentModel?.name,\n    };\n\n    const modelGroup = this.getModelsByTypeId(typeId);\n    if (modelGroup === undefined) {\n      // no models of this type yet\n      const modelsOfType = this.modelsOfTypeLoadHook({\n        typeId,\n        models: [uModel],\n      });\n      this.modelsByTypeId.set(typeId, modelsOfType);\n    } else if (currentModel === undefined) {\n      // new model instert\n      modelGroup.models.push(this.typedModelLoadHook(uModel));\n    }\n    this.modelsById.set(uModel.id, uModel); // add/update model index\n  }\n\n  public async deleteModelById(id: string): Promise<void> {\n    this.modelsById.delete(id);\n  }\n}\n"]}